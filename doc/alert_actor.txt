alert_actor(3)
==============

NAME
----
alert_actor - actor for handling device alerts

SYNOPSIS
--------
----
Please add '@interface' section in '../include/alert_actor.h'.
Please add '@interface' section in '../src/alert_actor.cc'.
----

DESCRIPTION
-----------

Please add '@header' section in '../src/alert_actor.cc'.

Please add '@discuss' section in '../src/alert_actor.cc'.

EXAMPLE
-------
.From alert_actor_test method
----
static const char* endpoint = "ipc://fty-alert-actor";

// malamute broker
zactor_t *malamute = zactor_new (mlm_server, (void*) "Malamute");
assert (malamute);
if (verbose)
    zstr_send (malamute, "VERBOSE");
zstr_sendx (malamute, "BIND", endpoint, NULL);

Device dev("mydevice");
std::map<std::string,std::vector<std::string> > alerts = {
    { "ambient.temperature.status", {"critical-high", "", ""} },
    { "ambient.temperature.high.warning", {"80", "", ""} },
    { "ambient.temperature.high.critical", {"100", "", ""} },
    { "ambient.temperature.low.warning", {"10", "", ""} },
    { "ambient.temperature.low.critical", {"5", "", ""} },
};
dev.addAlert("ambient.temperature", alerts);
dev._alerts["ambient.temperature"].status = "critical-high";
Devices devs;
devs._devices["mydevice"] = dev;

mlm_client_t *client = mlm_client_new ();
assert (client);
mlm_client_connect (client, endpoint, 1000, "agent-nut-alert");
mlm_client_set_producer (client, FTY_PROTO_STREAM_ALERTS_SYS);

mlm_client_t *rfc_evaluator = mlm_client_new ();
assert (rfc_evaluator);
mlm_client_connect (rfc_evaluator, endpoint, 1000, "alert-agent");

mlm_client_t *alert_list = mlm_client_new ();
assert (alert_list);
mlm_client_connect (alert_list, endpoint, 1000, "alert-list");
mlm_client_set_consumer (alert_list, FTY_PROTO_STREAM_ALERTS_SYS, ".*");

zpoller_t *poller = zpoller_new (
    mlm_client_msgpipe (client),
    mlm_client_msgpipe (rfc_evaluator),
    mlm_client_msgpipe (alert_list),
    NULL);
assert (poller);

devs.publishRules (client);
devs.publishAlerts (client);

// check rule message
{
    verbose_printf ("\n    recvrule\n");
    void *which = zpoller_wait (poller, 1000);
    assert (which);
    zmsg_t *msg = mlm_client_recv (rfc_evaluator);
    assert (msg);
    assert (streq (mlm_client_subject (rfc_evaluator), "rfc-evaluator-rules"));

    verbose_printf ("    rule command\n");
    char *item = zmsg_popstr (msg);
    assert (item);
    assert (streq (item, "ADD"));
    zstr_free (&item);

    verbose_printf ("    rule json\n");
    item = zmsg_popstr (msg);
    assert (item);
    assert (item[0] == '{');
    zstr_free (&item);

    zmsg_destroy (&msg);
}
// check alert message
{
    verbose_printf ("    receive alert\n");
    void *which = zpoller_wait (poller, 1000);
    assert (which);
    zmsg_t *msg = mlm_client_recv (alert_list);
    assert (msg);
    assert (is_fty_proto(msg));
    fty_proto_t *bp = fty_proto_decode (&msg);
    assert (bp);

    verbose_printf ("    is alert\n");
    assert (streq (fty_proto_command (bp), "ALERT"));

    verbose_printf ("    is active\n");
    assert (streq (fty_proto_state (bp), "ACTIVE"));

    verbose_printf ("    severity\n");
    assert (streq (fty_proto_severity (bp), "CRITICAL"));

    verbose_printf ("    element\n");
    assert (streq (fty_proto_element_src (bp), "mydevice"));

    fty_proto_destroy (&bp);
    zmsg_destroy (&msg);
}
devs._devices["mydevice"]._alerts["ambient.temperature"].status = "good";
devs.publishAlerts (client);
// check alert message
{
    verbose_printf ("    receive resolved\n");
    void *which = zpoller_wait (poller, 1000);
    assert (which);
    zmsg_t *msg = mlm_client_recv (alert_list);
    assert (msg);
    assert (is_fty_proto(msg));
    fty_proto_t *bp = fty_proto_decode (&msg);
    assert (bp);
    assert (streq (fty_proto_command (bp), "ALERT"));

    verbose_printf ("    is resolved\n");
    assert (streq (fty_proto_state (bp), "RESOLVED"));

    fty_proto_destroy (&bp);
    zmsg_destroy (&msg);
}

zpoller_destroy (&poller);
mlm_client_destroy(&client);
mlm_client_destroy(&alert_list);
mlm_client_destroy(&rfc_evaluator);
zactor_destroy (&malamute);
----
