#!/bin/bash
#
# Copyright (C) 2016 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file    bios-dmf
#  \brief   Helper script handling DMF files (part of Extreme support)
#  \author  Michal Vyskocil <MichalVyskocil@Eaton.com>
#  \details Helper script for handling DMF files, it can copy and enable things
#
if [ "$(id -u)" != "0" ] ; then
    exec sudo "$0" "$@"
fi

set -e

export PATH=/bin:/usr/bin
export LC_ALL=C
#hack for Makefile.am and make distcheck
export PROG=$(readlink -f "${0}")

die() {
    echo "${@}" >&2
    exit 1
}

source /etc/default/bios-db-rw

TMPDIR=${TMPDIR:-/tmp}
NUTCONFIGDIR=/etc/nut
[ -d "$NUTCONFIGDIR" ] || NUTCONFIGDIR=/etc/ups
[ -d "$NUTCONFIGDIR" ] || die "NUT configuration directory not found"
NUTCONFIG="$NUTCONFIGDIR/ups.conf"

DMFSNMPD=/usr/share/nut/dmfsnmp.d/
DMFSNMP=/usr/share/nut/dmfsnmp/

[ -d "${DMFSNMPD}" ] || die "Can't find NUT DMF runtime dir at ${DMFSNMPD}"

if [[ -z "${BIOS_USER}" ]]; then
    source /etc/default/_bios-script
fi

usage () {
    echo "${PROG}"
    echo "upload dmf1 [dmf2 ...] - upload dmf files to ${DMFSNMPD}"
    echo "enable asset1 [asset2 ...] - enable dmf for particular asset"
    echo "list - list all assets with enabled dmf"
}

do_mysql() {
    mysql -N -B -u "${DB_USER}" -p"${DB_PASSWD}" box_utf8 -e "$@"
}

get_asset_ids () {
    condition=`echo "${@}" | sed -E "s/([^[:space:]]+)/name=\'\1\'/g" | sed 's/ / OR /g'`
    do_mysql "SELECT id FROM v_bios_asset_element WHERE (${condition})"
}

do_upload () {
    cp "${@}" -t ${DMFSNMP}
    for dmf in "${@}"; do
        DMFNAME=`basename $dmf`
        ln -s ${DMFSNMP}${DMFNAME} -t ${DMFSNMPD}
    done
}

do_enable () {
    for id in `get_asset_ids "${@}"`; do
        do_mysql "INSERT INTO v_bios_asset_ext_attributes (keytag, value, id_asset_element, read_only) \
            VALUES ('upsconf_enable_dmf', 'true', $id, 0) \
            ON DUPLICATE KEY UPDATE value='true';
            "
    done
    agent-asset-cli republish "${@}"
}

do_disable () {
    for id in `get_asset_ids "${@}"`; do
        do_mysql "DELETE FROM v_bios_asset_ext_attributes WHERE (keytag = 'upsconf_enable_dmf' AND id_asset_element=$id)"
    done
    agent-asset-cli republish "${@}"
}

do_list () {
    do_mysql 'SELECT t1.name FROM v_bios_asset_element t1 LEFT JOIN v_bios_asset_ext_attributes t2 ON t1.id = t2.id_asset_element WHERE t2.keytag="upsconf_enable_dmf" AND t2.value="true";'
}

COMMAND=${1}
if [[ -z "${COMMAND}" ]]; then
    COMMAND="--help"
else
    shift 1
fi

case "${COMMAND}" in
    "upload")
        do_upload "${@}"
        ;;
    "enable")
        do_enable "${@}"
        ;;
    "disable")
        do_disable "${@}"
        ;;
    "list")
        do_list "${@}"
        ;;
    *)
        usage
        exit 1
        ;;
esac
