#!/bin/bash
#
# Copyright (C) 2014 - 2018 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file    fty-nutconfig
#  \brief   Helper script for autoconfig agent
#  \author  Tomas Halman <TomasHalman@Eaton.com>
#           Michal Vyskocil <MichalVyskocil@Eaton.com>
#           Jim Klimov <EvgenyKlimov@Eaton.com>
#  \details Helper script for autoconfig agent. It creates new NUT configuration
#           from files stored in /var/lib/fty/fty-nut/devices.

set -e
shopt -s nullglob

export PATH=/bin:/usr/bin
export LC_ALL=C
#hack for Makefile.am and make distcheck
export PROG=$(readlink -f "${0}")

die() {
    echo "${@}" >&2
    exit 1
}

TMPDIR=${TMPDIR:-/tmp}
BIOSCONFDIR=/var/lib/fty/fty-nut/devices
NUTCONFIGDIR=/etc/nut
[ -d "$NUTCONFIGDIR" ] || NUTCONFIGDIR=/etc/ups
[ -d "$NUTCONFIGDIR" ] || die "NUT configuration directory not found"
NUTCONFIG="$NUTCONFIGDIR/ups.conf"

mkdir -p "${BIOSCONFDIR}"
chown -R bios:bios-infra "${BIOSCONFDIR}"

TMPFILE=$(mktemp -p "${TMPDIR}" nutconfig.XXXXXXXXXX)

# Handle signals and a graceful shell process exit
trap "rm -f ${TMPFILE} >/dev/null 2>&1" 0 1 2 3 15

cat << EOF > "${TMPFILE}"
# Data-walks of networked devices to initialize a NUT driver state
# can take considerable time; we should allow for that to succeed.
maxstartdelay = 180

EOF
RES=$?

if [ "$RES" = 0 ]; then
    cat "${BIOSCONFDIR}"/* /dev/null 2> /dev/null >> "${TMPFILE}" || RES=$?
fi

SYSTEMCTL_RELOAD=false
NDE_RESTART=false
if [ "$RES" = 0 ] && [ ! -s /etc/systemd/system/nut-driver@.service.d/timeout.conf ] ; then
    # Use drop-in configuration to override settings of a bundled service file
    mkdir -p /etc/systemd/system/nut-driver@.service.d/
    cat << EOF > /etc/systemd/system/nut-driver@.service.d/timeout.conf
[Service]
# For 42ity: align with "maxstartdelay = 180" in /etc/nut/ups.conf
TimeoutStartSec=190s
EOF
RES=$?
    if [ "$RES" = 0 ] ; then
        chown -R root:root /etc/systemd/system/nut-driver@.service.d/
        SYSTEMCTL_RELOAD=true
    fi
fi

if [ "$RES" = 0 ] \
&& [ ! -s /etc/systemd/system/nut-driver-enumerator-daemon.service.d/loopfreq.conf ] \
&& /bin/systemctl is-enabled nut-driver-enumerator-daemon.service | grep -w enabled \
; then
    mkdir -p /etc/systemd/system/nut-driver-enumerator-daemon.service.d/
    cat << EOF > /etc/systemd/system/nut-driver-enumerator-daemon.service.d/loopfreq.conf
[Service]
Environment="DAEMON_SLEEP=60"
EOF
    RES=$?
    if [ "$RES" = 0 ] ; then
        chown -R root:root /etc/systemd/system/nut-driver-enumerator-daemon.service.d/
        NDE_RESTART=true
        SYSTEMCTL_RELOAD=true
    fi
fi

if $SYSTEMCTL_RELOAD ; then
    /bin/systemctl daemon-reload
fi

if $NDE_RESTART ; then
    /bin/systemctl restart nut-driver-enumerator-daemon.service || true
fi

tickle_NDE() {
    # Still work towards regularly reducing the chance that we
    # could have missed some NUT config changes earlier (posted
    # while the script was already processing earlier data)...
    # Note that this somewhat duplicates the activity of a .path
    # unit, which should also trigger the corresponding activity
    # when ups.conf is changed, but unlike the path - this code
    # ensures that the config is re-evaluated after any asset
    # repubishing and similar events, so would cover up if we
    # missed something earlier... better late than never...

    echo "FAILSAFE: Tickling NUT nut-driver-enumerator service(s) to regenerate the service units"
    if /bin/systemctl is-enabled nut-driver-enumerator.service | grep -w enabled ; then
        /bin/systemctl start --no-block nut-driver-enumerator.service || true
    fi
    if /bin/systemctl is-enabled nut-driver-enumerator-daemon.service | grep -w enabled ; then
        /bin/systemctl reload --no-block nut-driver-enumerator-daemon.service || \
        /bin/systemctl restart --no-block nut-driver-enumerator-daemon.service || true
    fi
}

if [ "$RES" = 0 ] ; then
    if diff -q "${NUTCONFIG}" "${TMPFILE}" ; then
        # Avoid wearing out the flash storage by needless updates
        echo "NUT configuration did not change since last generation" >&2
        tickle_NDE
        exit 0
    fi

    # This can take a while and needs space; have our moves atomic
    mv -f "${TMPFILE}" "${NUTCONFIG}.tmp" || die "Error moving ups.conf from temporary to final directory"
    mv -f "${NUTCONFIG}.tmp" "${NUTCONFIG}" || die "Error atomically moving ups.conf from temporary to final file"
    chmod 0640 "${NUTCONFIG}"
    chown root:nut "${NUTCONFIG}"
    tickle_NDE
    exit 0
else
    rm "${TMPFILE}" >/dev/null 2>&1
    die "No configuration found"
fi
