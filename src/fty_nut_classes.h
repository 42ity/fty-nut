/*  =========================================================================
    fty_nut_classes - private header file

    Copyright (C) 2014 - 2018 Eaton

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
    =========================================================================
*/

#ifndef FTY_NUT_CLASSES_H_INCLUDED
#define FTY_NUT_CLASSES_H_INCLUDED

//  Platform definitions, must come first
#include "platform.h"

//  External API
#include "../include/fty_nut.h"

//  Opaque class structures to allow forward references
#ifndef ASSETS_T_DEFINED
typedef struct _assets_t assets_t;
#define ASSETS_T_DEFINED
#endif
#ifndef CIDR_T_DEFINED
typedef struct _cidr_t cidr_t;
#define CIDR_T_DEFINED
#endif
#ifndef NUTSCAN_T_DEFINED
typedef struct _nutscan_t nutscan_t;
#define NUTSCAN_T_DEFINED
#endif
#ifndef NUTDUMPDATA_T_DEFINED
typedef struct _nutdumpdata_t nutdumpdata_t;
#define NUTDUMPDATA_T_DEFINED
#endif
#ifndef DEVICE_SCAN_T_DEFINED
typedef struct _device_scan_t device_scan_t;
#define DEVICE_SCAN_T_DEFINED
#endif
#ifndef RANGE_SCAN_T_DEFINED
typedef struct _range_scan_t range_scan_t;
#define RANGE_SCAN_T_DEFINED
#endif
#ifndef SCAN_DNS_T_DEFINED
typedef struct _scan_dns_t scan_dns_t;
#define SCAN_DNS_T_DEFINED
#endif
#ifndef SCAN_NUT_T_DEFINED
typedef struct _scan_nut_t scan_nut_t;
#define SCAN_NUT_T_DEFINED
#endif
#ifndef ACTOR_COMMANDS_T_DEFINED
typedef struct _actor_commands_t actor_commands_t;
#define ACTOR_COMMANDS_T_DEFINED
#endif
#ifndef UPS_STATUS_T_DEFINED
typedef struct _ups_status_t ups_status_t;
#define UPS_STATUS_T_DEFINED
#endif
#ifndef NUT_DEVICE_T_DEFINED
typedef struct _nut_device_t nut_device_t;
#define NUT_DEVICE_T_DEFINED
#endif
#ifndef NUT_AGENT_T_DEFINED
typedef struct _nut_agent_t nut_agent_t;
#define NUT_AGENT_T_DEFINED
#endif
#ifndef NUT_CONFIGURATOR_T_DEFINED
typedef struct _nut_configurator_t nut_configurator_t;
#define NUT_CONFIGURATOR_T_DEFINED
#endif
#ifndef ALERT_DEVICE_T_DEFINED
typedef struct _alert_device_t alert_device_t;
#define ALERT_DEVICE_T_DEFINED
#endif
#ifndef ALERT_DEVICE_LIST_T_DEFINED
typedef struct _alert_device_list_t alert_device_list_t;
#define ALERT_DEVICE_LIST_T_DEFINED
#endif
#ifndef SENSOR_DEVICE_T_DEFINED
typedef struct _sensor_device_t sensor_device_t;
#define SENSOR_DEVICE_T_DEFINED
#endif
#ifndef SENSOR_LIST_T_DEFINED
typedef struct _sensor_list_t sensor_list_t;
#define SENSOR_LIST_T_DEFINED
#endif
#ifndef STATE_MANAGER_T_DEFINED
typedef struct _state_manager_t state_manager_t;
#define STATE_MANAGER_T_DEFINED
#endif
#ifndef ASSET_STATE_T_DEFINED
typedef struct _asset_state_t asset_state_t;
#define ASSET_STATE_T_DEFINED
#endif

//  Extra headers
#include "nut_mlm.h"

//  Internal API
// common definitions and idioms from czmq_prelude.h, which are used in generated code
#if ! defined(__CZMQ_PRELUDE_H_INCLUDED__)
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

#define streq(s1,s2)    (!strcmp ((s1), (s2)))
#define strneq(s1,s2)   (strcmp ((s1), (s2)))
//  Replacement for malloc() which asserts if we run out of heap, and
//  which zeroes the allocated block.
static inline void *
safe_malloc (size_t size, const char *file, unsigned line)
{
//     printf ("%s:%u %08d\n", file, line, (int) size);
    void *mem = calloc (1, size);
    if (mem == NULL) {
        fprintf (stderr, "FATAL ERROR at %s:%u\n", file, line);
        fprintf (stderr, "OUT OF MEMORY (malloc returned NULL)\n");
        fflush (stderr);
        abort ();
    }
    return mem;
}

//  Define _ZMALLOC_DEBUG if you need to trace memory leaks using e.g. mtrace,
//  otherwise all allocations will claim to come from czmq_prelude.h. For best
//  results, compile all classes so you see dangling object allocations.
//  _ZMALLOC_PEDANTIC does the same thing, but its intention is to propagate
//  out of memory condition back up the call stack.
#if defined (_ZMALLOC_DEBUG) || defined (_ZMALLOC_PEDANTIC)
#   define zmalloc(size) calloc(1,(size))
#else
#   define zmalloc(size) safe_malloc((size), __FILE__, __LINE__)
#endif
#endif // __CZMQ_PRELUDE_H_INCLUDED__


#include "assets.h"
#include "cidr.h"
#include "nutscan.h"
#include "nutdumpdata.h"
#include "device_scan.h"
#include "range_scan.h"
#include "scan_dns.h"
#include "scan_nut.h"
#include "actor_commands.h"
#include "ups_status.h"
#include "nut_device.h"
#include "nut_agent.h"
#include "nut_configurator.h"
#include "alert_device.h"
#include "alert_device_list.h"
#include "sensor_device.h"
#include "sensor_list.h"
#include "state_manager.h"
#include "asset_state.h"

//  *** To avoid double-definitions, only define if building without draft ***
#ifndef FTY_NUT_BUILD_DRAFT_API

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    assets_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    nutdumpdata_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    device_scan_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    range_scan_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    scan_dns_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    scan_nut_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    actor_commands_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    ups_status_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    nut_device_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    nut_agent_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    nut_configurator_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    alert_device_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    alert_device_list_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    sensor_device_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    sensor_list_test (bool verbose);

//  *** Draft method, defined for internal use only ***
//  Self test of this class.
FTY_NUT_PRIVATE void
    state_manager_test (bool verbose);

//  Self test for private classes
FTY_NUT_PRIVATE void
    fty_nut_private_selftest (bool verbose, const char *subtest);

#endif // FTY_NUT_BUILD_DRAFT_API

#endif
